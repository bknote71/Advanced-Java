제네릭 용어 정리
- 로 타입: List
- 제네릭 타입: List<E>
- 매개변수화 타입: List<String>
- 타입 매개변수: E
- 실제 타입 매개변수: String
- 한정적 타입 매개변수: List<E extends Number>
- 비한정적 와일드카드 타입: Class<?>
- 한정적 와일드카드 타입: Class<? extends Annotation>

사용:
- class Box<T>
- Box<String> box = new Box<>();

제네릭 특징:
1. 재사용성
2. 컴파일 시점에 컴파일러가 정확하게 타입 체킹을 해준다.
- 컴파일 타임과 런타임에 "type safety"를 얻게 해준다.
3. 캐스팅과 관련된 부분을 컴파일러가 적절히 자동으로 캐스팅을 해준다.

안정성: 런타임이 아닌 컴파일 타임에 타입에 관련된 문제를 찾을 수 있다.
표현력: 제네릭을 활용하면 타입 정보가 주석이 아닌 타입 선언 자체에 녹아든다.
==> 이 2가지가 제네릭의 핵심 포인트이다.

Raw Type
- 변수 선언 시에 제네릭으로 선언되어 있는 클래스를 타입 매개변수없이 사용하는 타입이다.
- List list = new ArrayList();
- List list = new ArrayList<Integer>();

불안정성:
- 컴파일 타임에 타입 안정성을 보장할 수 없을 뿐더러 타입 정보에 대한 표현력마저 잃는다.
- raw type은 모든 타입을 할당하거나 할당받을 수 있다.
예)
- List list = arrayList; // List<Integer> arrayList
- List list = stringList; // List<String> stringList
- list.add(1);
- list.add("abc");

String s = (String) list.get(0);
==> 원소를 꺼내어 변수에 대입할 때 ClassCastException 이 발생한다.
==> 변수에 대입할 때 컴파일러가 형변환을 해주는데 이 때 타입이 맞지 않아 발생하는 문제이다.

결론:
- raw type을 사용하는 코드가 중간에 들어가게 된다면 타입과 관련하여 심각한 에러가 발생할 수 있다.

raw type이 사용 가능한 이유는 무엇일까?
- 제네릭 등장 이전에 사용하던 코드와의 호환성을 위해서이다.
- 자바5 이전, 제네릭이 없었을 때 raw type을 사용하였다.
- raw type을 허용하여 list -> List<Integer>로의 이전을 가능하게 하였다.



































































